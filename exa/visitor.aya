/**
 * 訪問キャラクタ
 *
 * @author  n13i <n13i@m2hq.net>
 * @version 0.01
 *
 * @date    2006/07/25 作成
 *
 * @ingroup Visitor
 * @file
 */

#import "prototype150.aya"
#import "prototype300.aya"
#import "core/lib/mxcl/pwsconst.h"
#import "core/iccomm.h"
#import "core/message.h"
#import "core/surface.h"
#import "core/msgbox.h"
#import "core/sprict_ict.h"
#import "properties.h"
//#import "test.h"


string visitor_from = "";
string visitor_message = "";
string visitor_reply = "";
int    visitor_time = 0;

void VisitorStartUp(string from, string message)
{
    Prop_deletePrivateTree();
    DelPropertyTree("MXkernel");
    SaveProperty();

    visitor_from = from;
    visitor_message = message;
    visitor_time = Time();

    MakeFolder("local");
    ICComm_cleanupMessages();
    Surface_init();
    ICT_init();
    //Test_init();

    MsgBox_setStyle("default");
    MsgBox_setSize(16, 6);
    Surface_load("img\\surface");

    Surface_setTargetWindow(PWS_WINNAME_MAIN);
    Surface_showImageSet("000");
    Surface_playAnimation(SURFACE_ANIMATION_BLINK);

    // キャラデリ元キャラクタへ通知
    // 受信側では型番も得られる
    ICComm_sendMessage(from, "NH-MXPJ-01R", "test", ICCOMM_SEND_SYNC);

    //LoadBitmap("img\\surface\\000.hp3");
    //DisplayImage(PWS_EFFECT_ON);

    Message_newFromString(visitor_message);
    ICT_setExternalVariable("sender", Message_getHeader("Name"));
    ICT_runScript("\e{%sender}からメッセージを預かってきました。");

    visitor_showMessage();
}

string VisitorShutDown()
{
    ICT_runScript("\eそれでは。");
    Wait(3000);
    return visitor_reply;
}

action MouseUpL@(false)
{
    ICT_runScript("\eは{(ー|)}い、{(お呼びです|呼びました)}か{(ー|)}？\n\n");

    AddItem("メッセージを見せて")
    {
        ICT_runScript("\eどうぞ。");
        visitor_showMessage();
    }
    AddCancelItem
    {
        Talk("\e");
        HideMsgBox();
    }
    Choice;
}

/**
 * メッセージを表示する
 *
 * @retval 0 失敗
 * @retval 1 成功
 *
 * @date 2006/11/13
 */
int visitor_showMessage()
{
    Message_newFromString(visitor_message);

    int r = IMShowMessageBrowseDialog(
        visitor_from,
        Message_getBody(),
        Message_formatTime(visitor_time),
        true,
        PWS_CB_INTERRUPT,
        visitor_onCloseMessageBrowseDialog,
        "");

    return r;
}

/**
 * メッセージ表示ダイアログを閉じたときコールバックされる
 *
 * @param[in] result  ダイアログの閉じられ方
 * @param[in] from    返信元 Chararina ID
 * @param[in] message メッセージ本文
 * @param[in] date    日付
 * @param[in] quote   引用チェックボックスの状態
 * @param[in] param   汎用パラメータ
 *
 * @date 2006/11/13
 * @static
 */
void visitor_onCloseMessageBrowseDialog(int result, string from,
                                        string message, string date,
                                        boolean quote, string param)
{
    // 返信ボタンが押された
    if(result == 1)
    {
        visitor_editMessage(quote);
    }
}

/**
 * メッセージを編集する
 */
int visitor_editMessage(boolean quote)
{
    if(quote)
    {
        Message_newFromString(visitor_message);
        Message_addQuote();
    }
    else
    {
        Message_new();
    }

    int r = IMShowMessageEditDialog(
        visitor_from,
        Message_getBody(),
        "愛佳に返事を持たせて帰す",
        true,
        PWS_CB_INTERRUPT,
        visitor_onCloseMessageEditDialog,
        "");

    return r;
}

/**
 * visitor_editMessage で開いたダイアログが閉じられた時に
 * コールバックされる。
 *
 * @param[in] result  ダイアログの閉じられ方
 * @param[in] to      送信先 Chararina ID
 * @param[in] message メッセージ本文
 * @param[in] method  送信方法
 * @param[in] offline オフラインでも送信するか
 * @param[in] param   汎用パラメータ
 *
 * @static
 */
void visitor_onCloseMessageEditDialog(int result, string to,
                                      string message, string method,
                                      boolean offline, string param)
{
    // 送信ボタンが押された
    if(result == 1)
    {
        Message_new();

        Message_setBody(message);
        visitor_reply = Message_getAll();

        ICT_runScript("\eメッセージを預かりました。");
    }
}

boolean visitor_isTimeOut()
{
    int timeout_second = 0;
    string timeout = GetProperty("Visit\\TimeOut");
    if(timeout == NULL)
    {
        MakePropertyTree("Visit");
        PutProperty("Visit\\TimeOut", "5");
        timeout = "5";
    }

    timeout_second = atoi(timeout) * 60;

    if(Time() > visitor_time + timeout_second)
    {
        return true;
    }

    return false;
}

Critical action visitor_checkTimeOut@(visitor_isTimeOut())
{
    ICT_runScript("\eさて、\sそろそろ帰りますねー。");
    Wait(5000);
    ExitPersona();
}

