/**
 * Multiple-Stage Character Delivery
 */
#import "prototype150.aya"
#import "prototype200.aya"
#import "prototype300.aya"
#import "core/lib/mxcl/mxcl.h"
#import "core/lib/mxcl/pwsconst.h"
#import "core/iccomm.h"
#import "core/message.h"
#import "core/surface.h"
#import "core/msgbox.h"
#import "core/sprict_ict.h"
#import "core/charadeli.h"
#import "properties.h"
#import "test.h"


string visitor_from = "";
string visitor_frompsn = "";
string visitor_message = "";
string visitor_reply = "";
int    visitor_time = 0;
string visitor_root = "";
string visitor_rootpsn = "";

boolean visitor_nextStageSent = false;
boolean visitor_nextStageConfirmed = false;
boolean visitor_isFinalChain = true;
int visitor_nextStageConfirmTimeout = 0;

int visit_sid = -1;

boolean visitor_isAutoVisit = false;

// 自分の型名 前段から教えてもらい，後段に伝える
string my_psn = "";

/**
 * キャラデリ送信先での起動
 *
 * @param[in] from キャラデリ元PID
 * @param[in] message キャラデリ元で設定したメッセージ
 */
void VisitorStartUp(string from, string message)
{
    Prop_deletePrivateTree();
    DelPropertyTree("MXkernel");
    SaveProperty();

    visitor_from = from;
    visitor_message = message;
    visitor_time = Time();

    MakeFolder("local");
    ICComm_cleanupMessages();
    Surface_init();
    ICT_init();
    //Test_init();


    MakePropertyTree("Visit");
    if(GetProperty("Visit\\CurrentChain") == NULL)
    {
        PutProperty("Visit\\CurrentChain", "1");
    }
    if(GetProperty("Visit\\ChainUsers") == NULL)
    {
        PutProperty("Visit\\ChainUsers", StrEncodeURL(visitor_from));
    }
    PutProperty("Visit\\ChainUsers",
            GetProperty("Visit\\ChainUsers") + "," + StrEncodeURL(L11GetPID()));


    MsgBox_setStyle("default");
    MsgBox_setSize(16, 7);
    Surface_load("img\\surface");

    Surface_setTargetWindow(PWS_WINNAME_MAIN);
    Surface_showImageSet("000");
    Surface_playAnimation(SURFACE_ANIMATION_BLINK);

    // メッセージのヘッダから前段のキャラデリ元の型名と発信元PIDを得る
    // FIXME プロパティに保存しておけばいいのでは？
    Message_newFromString(visitor_message);
    visitor_root = Message_getHeader("MSCD-Root");
    visitor_rootpsn = Message_getHeader("MSCD-RootPSN");
    visitor_frompsn = Message_getHeader("MSCD-FromPSN");

    // MSCD-FromPSNヘッダが存在する場合，自動キャラデリと判断
    visitor_isAutoVisit = (visitor_frompsn != "");

    // 送信元のユーザ名をセット
    ICT_setExternalVariable("sender", Message_getHeader("Name"));

    if(visitor_isAutoVisit)
    {
        // 多段 or 自動キャラデリの場合

        // 前段のキャラデリ元キャラクタに通知
        // 自分の型名はキャラデリ元からのメッセージ受信で判明する
        if(ICComm_sendMessage(visitor_from, visitor_frompsn, "MSCD/1.0 StartUp", ICCOMM_SEND_SYNC) != 1)
        {
            // メッセージ送信失敗
        }

        ICT_runScript("\eおじゃましまーす。\w\n" +
                "暇だったので{%sender}のところから勝手に遊びにきましたー。\n");

        // 大元に現在段数を通知
        ICComm_sendMessage(visitor_root, visitor_rootpsn, "MSCD/1.0 CurrentChain " + GetProperty("Visit\\CurrentChain"), ICCOMM_SEND_ASYNC);
    }
    else
    {
        if(ICComm_sendMessage(visitor_from, "NH-MXPJ-01R", "MSCD/1.0 StartUp", ICCOMM_SEND_SYNC) != 1)
        {
            // メッセージ送信失敗
        }

        ICT_runScript("\e{%sender}からメッセージを預かってきました。");
        visitor_showMessage();
    }
}

string VisitorShutDown()
{
    if(visitor_isAutoVisit)
    {
        return visitor_auto_shutdown();
    }

    return visitor_normal_shutdown();
}
string visitor_auto_shutdown()
{
    if(visitor_isFinalChain)
    {
        // メニューから終了させられた or 次の送信相手がいない
        ICT_runScript("\eさて、\sそろそろ帰りますねー。");

        // 大元にキャラデリ終了を通知
        ICComm_sendMessage(visitor_root, visitor_rootpsn, "MSCD/1.0 FinalChain " + GetProperty("Visit\\CurrentChain"), ICCOMM_SEND_ASYNC);
    }
    else
    {
        ICT_runScript("\eさて、\sそれじゃ次いきますねー。");
    }
    Wait(5000);

    ICT_runScript("\eそれでは。");
    Wait(3000);
    return "※このエラーメッセージはキャラクタ「愛佳」(NH-MXPJ-01R)の「多段キャラデリ」機能によるメッセージです。無視してください。";
}
string visitor_normal_shutdown()
{
    ICT_runScript("\eそれでは。");
    Wait(3000);
    return visitor_reply;
}

/**
 * キャラクタ間通信新着メッセージのチェック
 */
action visitor_checkNewICCommMessage@(Second() % 2 == 1)
{
    string messages[][];
    ICComm_getMatchingMessages("/.*/", "/.*/", "/^MSCD\\/1\\.0 /", messages);

    int i;
    for(i = 0; i < lengthof messages; i++)
    {
        int time = atoi(messages[i][0]);
        string pid = messages[i][1];
        string psn = messages[i][2];
        string msg = messages[i][3];
        if(psn == visitor_frompsn && StrToken(msg, " ", 1) == "StartUpAck")
        {
            // 前段のキャラデリ元からの通知を受ける
            my_psn = StrToken(msg, " ", 2);
        }

        if(StrToken(msg, " ", 1) == "StartUp")
        {
            // 後段のキャラデリ先から起動通知を受けたら
            // メッセージ送信元キャラクタ型番を返送する
            ICComm_sendMessage(pid, psn, "MSCD/1.0 StartUpAck " + psn, ICCOMM_SEND_SYNC);
            // ExitPersona();するためのフラグを立てる
            visitor_nextStageConfirmed = true;
        }

        // 読んだメッセージは消す
        ICComm_deleteMessage(time);
    }
}

action MouseUpL@(false)
{
    ICT_runScript("\eは{(ー|)}い、{(お呼びです|呼びました)}か{(ー|)}？\n\n");

    if(visitor_isAutoVisit)
    {
        visitor_auto_mouseUpL();
    }
    else
    {
        visitor_normal_mouseUpL();
    }
}
void visitor_auto_mouseUpL()
{
    AddItem("何だ君は")
    {
        ICT_runScript("\e\a(http://mxpj.net/r/NH-MXPJ-01R)愛佳\_aといいます。\c\n" +
                "「勝手にキャラデリ」と「多段キャラデリ」の2つの機能の実験でやってきましたー。\n\n");
        AddItem("勝手にキャラデリって？")
        {
            ICT_runScript("\e暇なときに、メンバーリストにいる誰かのところに勝手に訪問する機能です。\c\n" +
                "まあ、\s来たところで特にすることもないんですが、今のところは。\n");
        }
        AddItem("多段キャラデリって？")
        {
            ICT_runScript("\e訪問先から、さらにメンバーリストをたどって誰かのところに訪問する機能です。\c\n" +
                "開発中なのでいろいろご迷惑をおかけするかもしれませんが、よろしくお願いします。\c\n");
            if(GetProperty("Visit\\EnableMultiStageCharaDeli") == "1")
            {
                ICT_runScript("現在、多段キャラデリ機能は[有効]です。\s着いてから5分経つと次の方のところに行きます。\n");
            }
            else
            {
                ICT_runScript("現在、多段キャラデリ機能は[無効]です。\sしばらくしたら帰ります。\n");
            }
        }
        AddItem("そうですか")
        {
            ICT_runScript("\eそうなんですよー。\n");
        }
        Choice;
    }
    AddItem("なんでもない")
    {
        ICT_runScript("\eそうですかー。\n");
    }
    AddCancelItem
    {
        Talk("\e");
        HideMsgBox();
    }
    Choice;
}
void visitor_normal_mouseUpL()
{
    AddItem("メッセージを見せて")
    {
        ICT_runScript("\eどうぞ。");
        visitor_showMessage();
    }
    AddItem("なんでもない")
    {
        ICT_runScript("\eそうですかー。\n");
    }
    AddCancelItem
    {
        Talk("\e");
        HideMsgBox();
    }
    Choice;
}

/**
 * メッセージを表示する
 *
 * @retval 0 失敗
 * @retval 1 成功
 *
 * @date 2006/11/13
 */
int visitor_showMessage()
{
    Message_newFromString(visitor_message);

    int r = IMShowMessageBrowseDialog(
        visitor_from,
        Message_getBody(),
        Message_formatTime(visitor_time),
        true,
        PWS_CB_INTERRUPT,
        visitor_onCloseMessageBrowseDialog,
        "");

    return r;
}

/**
 * メッセージ表示ダイアログを閉じたときコールバックされる
 *
 * @param[in] result  ダイアログの閉じられ方
 * @param[in] from    返信元 Chararina ID
 * @param[in] message メッセージ本文
 * @param[in] date    日付
 * @param[in] quote   引用チェックボックスの状態
 * @param[in] param   汎用パラメータ
 *
 * @date 2006/11/13
 * @static
 */
void visitor_onCloseMessageBrowseDialog(int result, string from,
                                        string message, string date,
                                        boolean quote, string param)
{
    // 返信ボタンが押された
    if(result == 1)
    {
        visitor_editMessage(quote);
    }
}

/**
 * メッセージを編集する
 */
int visitor_editMessage(boolean quote)
{
    if(quote)
    {
        Message_newFromString(visitor_message);
        Message_addQuote();
    }
    else
    {
        Message_new();
    }

    int r = IMShowMessageEditDialog(
        visitor_from,
        Message_getBody(),
        "愛佳に返事を持たせて帰す",
        true,
        PWS_CB_INTERRUPT,
        visitor_onCloseMessageEditDialog,
        "");

    return r;
}

/**
 * visitor_editMessage で開いたダイアログが閉じられた時に
 * コールバックされる。
 *
 * @param[in] result  ダイアログの閉じられ方
 * @param[in] to      送信先 Chararina ID
 * @param[in] message メッセージ本文
 * @param[in] method  送信方法
 * @param[in] offline オフラインでも送信するか
 * @param[in] param   汎用パラメータ
 *
 * @static
 */
void visitor_onCloseMessageEditDialog(int result, string to,
                                      string message, string method,
                                      boolean offline, string param)
{
    // 送信ボタンが押された
    if(result == 1)
    {
        Message_new();

        Message_setBody(message);
        visitor_reply = Message_getAll();

        ICT_runScript("\eメッセージを預かりました。");
    }
}

//action visit_go@(Second() % 2 == 1 && CharaDeli_isReady(visit_sid))
//{
//    CharaDeli_doVisit(visit_sid);
//}

boolean visitor_isTimeOut()
{
    int timeout_second = 0;
    string timeout = GetProperty("Visit\\TimeOut");
    if(timeout == NULL || GetProperty("Visit\\EnableMultiStageCharaDeli") == "1")
    {
        // 多段キャラデリ有効時はタイムアウト設定値によらず5分で次へ
        PutProperty("Visit\\TimeOut", "5");
        timeout = "5";
    }

    timeout_second = atoi(timeout) * 60;

    if(Time() > visitor_time + timeout_second)
    {
        return true;
    }

    return false;
}

Critical action visitor_checkTimeOut@(visitor_isTimeOut())
{
    if(!visitor_isAutoVisit)
    {
        ICT_runScript("\eさて、\sそろそろ帰りますねー。");
        Wait(5000);
        ExitPersona();
    }
    else
    {
        visitor_auto_procTimeOut();
    }
}
void visitor_auto_procTimeOut()
{
    string next_pid = visitor_getNextStagePID();

    int n_chain = -1;
    string chain = GetProperty("Visit\\CurrentChain");
    if(chain != "" && chain != NULL)
    {
        n_chain = atoi(chain);
    }

    if(next_pid == "" ||
            my_psn == "" ||
            GetProperty("Visit\\EnableMultiStageCharaDeli") != "1" ||
            n_chain >= 5)
    {
        // 通信NGなどで自分の型名が不明の場合，
        // 後段からの通信を受けることができないので
        // ここでチェイン終了
        visitor_isFinalChain = true;

        ExitPersona();
    }
    else
    {
        PutProperty("Visit\\CurrentChain", itoa(n_chain + 1));

        // 後段をキャラデリ準備
        // タイムアップした場合のみ行う
        visit_sid = CharaDeli_newSession();
        CharaDeli_setSendDataName(visit_sid, "etc\\visitor_chain");
        //CharaDeli_setSendTo(visit_sid, "naoh128"); // TODO
        CharaDeli_setSendTo(visit_sid, next_pid);
        CharaDeli_addSendMessageHeader(visit_sid, "MSCD-FromPSN", my_psn);
        CharaDeli_addSendMessageHeader(visit_sid, "MSCD-RootPSN", visitor_rootpsn);
        CharaDeli_addSendMessageHeader(visit_sid, "MSCD-Root", visitor_root);
        CharaDeli_setSendMessageBody(visit_sid, "これはキャラクタ「愛佳」(NH-MXPJ-01R)の多段キャラデリ制御用メッセージであり、キャラクタが自動的に送信したものです。");
        CharaDeli_ready(visit_sid);
        CharaDeli_doVisit(visit_sid);

        visitor_nextStageConfirmTimeout = Time() + 20;
        visitor_nextStageSent = true;
    }
}

/**
 * 後段送信後，後段からのメッセージが確認できたら終了する
 */
Critical action visitor_checkNextStageConfirmed@(Second() % 2 == 1 && visitor_nextStageSent && visitor_nextStageConfirmed)
{
    visitor_isFinalChain = false;
    ExitPersona();
}

/**
 * 後段からのメッセージが確認できなかった
 */
Critical action visitor_checkNextStageConfirmedFailed@(Second() % 2 == 1 && visitor_nextStageSent && Time() >= visitor_nextStageConfirmTimeout)
{
    visitor_isFinalChain = true;
    ExitPersona();
}

/**
 * 次の訪問先のPIDを返す
 * これまで訪問していない，自分以外のユーザ
 * 候補がいない場合は空文字を返す
 */
string visitor_getNextStagePID()
{
    string state[][];
    string cand_pids[];
    if(MXCL_getMemberStates(state, true, true) > 0)
    {
        string chained_pid;
        int j;
        for(j = 0; (chained_pid = StrToken(GetProperty("Visit\\ChainUsers"), ",", j)) != NULL; j++)
        {
            chained_pid = StrDecodeURL(chained_pid);

            int i;
            for(i = 0; i < lengthof state; i++)
            {
                if(state[i][0] == chained_pid)
                {
                    state[i][0] = "";
                }
            }
        }

        int i;
        int idx = 0;
        for(i = 0; i < lengthof state; i++)
        {
            if(state[i][0] != "")
            {
                cand_pids[idx] = state[i][0];
                idx++;
            }
        }
    }
    else
    {
        return "";
    }

    if((lengthof cand_pids) <= 0)
    {
        return "";
    }

    int target_pid_idx = Random(lengthof cand_pids);
    return cand_pids[target_pid_idx];
}

