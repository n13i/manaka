/**
 * キャラデリ関連
 *
 * @author  n13i <n13i@m2hq.net>
 *
 * @version 0.1.0
 * @date    2006/07/25 作成
 *
 * @file
 * @ingroup Visit
 */


#import "prototype150.aya"
#import "prototype200.aya"
#import "prototype300.aya"
#import "core/lib/mxcl/mxcl.h"
#import "core/lib/mxcl/pwsconst.h"
#import "core/ui.h"
#import "core/sprict_spr.h"
#import "core/sprict_ict.h"
#import "core/icon.h"
#import "core/debug.h"
#import "core/charadeli.h"
#import "core/msgbox.h"


string VISIT_PROP = "Visit";

int visit_sid = -1;

/**
 * 訪問準備が完了しているなら訪問処理を行う
 *
 * @static
 */
action visit_go@(Second() % 2 == 1 && CharaDeli_isReady(visit_sid))
{
    Debug(DEBUG_LV_TRACE, "Visit", "exec visit");

    SPR_run("Visit", "go");
    if(CharaDeli_doVisit(visit_sid) != 1)
    {
        // fail
        // サインイン済みでも自分の状態がオフラインだと失敗する？
    }
}

action visit_return@(Second() % 2 == 1 && CharaDeli_isReturned(visit_sid))
{
    Debug(DEBUG_LV_TRACE, "Visit", "return visit");

    SPR_run("Visit", "return");
    CharaDeli_showReplyMessage(visit_sid);
}

void Visit_init()
{
    MakePropertyTree(VISIT_PROP);

    visit_sid = CharaDeli_newSession();
    CharaDeli_setSendDataName(visit_sid, "etc\\visitor");

    if(GetProperty(VISIT_PROP + "\\TimeOut") == NULL)
    {
        PutProperty(VISIT_PROP + "\\TimeOut", "5");
    }
}

void Visit_menu()
{
    boolean loop = true;
    string send_to_id;

    while(loop)
    {
        send_to_id = NULL;
        SPR_run("Visit", "whereToGo");

        AddItem(SPR_getText("Visit_menu", "selectVisitTo"))
        {
            string name;
            string id;

            if(visit_isSignedIn())
            {
                int r;

                MsgBox_pushSize();
                MsgBox_setSize(24, 12);
                //SPR_run("Visit", "checkMemberStates");
                r = visit_selectMember(id, name);
                MsgBox_popSize();

                if(r == 0)
                {
                    send_to_id = id;
                }
                else if(r == -2)
                {
                    SPR_run("Visit", "checkMemberStatesFailed");
                }
            }
        }
        // ID指定訪問
        AddItem(SPR_getText("Visit_menu", "directInputID"))
        {
            if(visit_isSignedIn())
            {
                SPR_run("Visit", "inputVisitTo");
                string id = EditBox(PWS_INPUT_TYPE_NORMAL, 64, "");
                if(id != NULL && id != "")
                {
                    send_to_id = id;
                }
            }
        }
        // 最後に受け取ったキャラデリの返信を表示
        /*
        AddItem(SPR_getText("Visit_menu", "showOfferDir"))
        {
            SPR_run("Visit", "showOfferDir");
        }
        */
        AddItem(SPR_getText("Visit_menu", "config"))
        {
            Visit_preference();
        }
        AddItem(SPR_getText("Visit_menu", "cancel"))
        {
            SPR_run("Reaction", "canceled");
            loop = false;
        }
        AddCancelItem
        {
            HideMsgBox();
            loop = false;
        }
        Choice;

        if(send_to_id != NULL && send_to_id != "")
        {
            CharaDeli_setSendTo(visit_sid, send_to_id);
            CharaDeli_setSendMessageBody(
                visit_sid,
                "メッセージを入力してください");
            CharaDeli_editMessage(visit_sid);
            SPR_run("Visit", "inputMessage");
            loop = false;
        }
    }
}

void Visit_preference()
{
    string pref[][];
    string result[];

    MsgBox_pushSize();
    MsgBox_setSize(-1, 12);

    UI_prefCreateItem(
        pref, -1, VISIT_PROP + "\\TimeOut", UI_PREF_TYPE_SELECT,
        "タイムアウト",
        SPR_getText("Visit_help", "timeout"),
        "0=なし,5=5分,10=10分,20=20分,30=30分,45=45分,60=1時間", "");

    if(UI_prefDialog("キャラデリの設定", pref, result) == 1)
    {
        int i;

        for(i = 0; i < lengthof result; i++)
        {
            string id = UI_prefGetID(pref, i);

            if(id != "")
            {
                PutProperty(id, result[i]);
            }
        }
    }

    MsgBox_popSize();
}

/**
 * サインインされていなければメッセージを表示する
 *
 * @retval true  サインインしている
 * @retval false サインインしていない
 *
 * @date 2006/10/30
 * @static
 */
boolean visit_isSignedIn()
{
    if(L11GetOwnSignInState() != 1)
    {
        // サインインしていない
        SPR_run("Visit", "pleaseSignIn");
        return false;
    }

    return true;
}

/**
 * キャラデリの訪問先を選択する
 *
 * @param[out] id   選択されたメンバーの ID
 * @param[out] name 選択されたメンバーの表示名
 *
 * @retval -2 メンバーリストの取得に失敗
 * @retval -1 キャンセルされた
 * @retval  0 正常終了
 *
 * @date 2006/10/29
 * @static
 */
int visit_selectMember(string &id, string &name)
{
    string state[][];
    string ids[];
    int sel;
    int talkwait = GetTalkWaitMode();

    if(MXCL_getMemberStates(state, true, false) > 0)
    {
        int i;

        for(i = 0; i < lengthof state; i++)
        {
            string userid = state[i][0];
            string username = state[i][1];
            int state_type = atoi(state[i][2]);
            string state_str = state[i][3];

            string state_icon;

            switch(state_type)
            {
            case 1:
                // サインインしていない or 不可視
                state_icon = ICON_IM_OFFLINE;
                break;
            case 2:
            case 3:
                // サインインしているが忙しい
                state_icon = ICON_IM_BUSY;
                break;
            case 4:
                // サインインしている
                state_icon = ICON_IM_ONLINE;
                break;
            default:
                state_icon = ICON_IM_OFFLINE;
            }

            ids[i] = state_icon + " " + username + " (" + state_str + ")";
        }

        SetTalkWaitMode(PWS_TALK_NOWAIT);
        SPR_run("Visit", "selectVisitTo");
        Talk(UI_getHorizontalLine() + "\n");
        SetTalkWaitMode(talkwait);

        sel = UI_listBox(ids, 0, -1, true);

        if(sel == -1)
        {
            // キャンセル
            return -1;
        }
        else
        {
            id = state[sel][0];
            name = state[sel][1];
        }
    }
    else
    {
//        ATalk("\e"+RTSGetText("charadeli", "getting_memberlist_failed")+"\c\n");
        return -2;
    }

    return 0;
}

/**
 * メンバーの状態を得る
 *
 * @param[out] members     メンバーの状態を格納する可変長配列
 * @param[in]  only_online オンラインのメンバーの情報のみ取得するかどうか
 *
 * @retval -1       メンバーリストの取得に失敗
 * @retval それ以外 状態取得したメンバーの数
 *
 * @note
 *   members[][0] : メンバーの Chararina ID
 *   members[][1] : メンバーの表示名
 *   members[][2] : メンバーの状態 (番号)
 *   members[][3] : メンバーの状態 (文字列)
 *
 * @date 2006/10/30
 * @static
 */

//int visit_getMemberStates(string members[][], boolean only_online)
//{
//    int n_members;
//    string members_id[];
//
//    emptyof members;
//
//    // メンバーリストに登録されているメンバーの ID を得る
//    if(L11GetFriends(members_id) != -1)
//    {
//        int i;
//
//        n_members = 0;
//        for(i = 0; i < lengthof members_id; i++)
//        {
//            int handle;
//
//            // メンバーの状態をサーバに問い合わせる
//            if(L11GetOnlineState(handle, members_id[i]) == 1)
//            {
//                int resp;
//
//                // 結果が返ってくるまで待つ
//                while((resp = L11WaitResponse(handle, 50)) == -24)
//                {
//                    Wait(0);
//                }
//
//                if(resp == 1)
//                {
//                    int state_type;
//                    string state_str;
//                    string name;
//
//                    L11GetResponseGetOnlineState(handle,
//                                                 state_type, state_str, name);
//
//                    if(!only_online || state_type == 4)
//                    {
//                        members[n_members][0] = members_id[i];
//                        members[n_members][1] = name;
//                        members[n_members][2] = itoa(state_type);
//                        members[n_members][3] = state_str;
//                        n_members++;
//                    }
//                }
//                else
//                {
//                    /**
//                     * -8 PIDで指定されたユーザーがいない
//                     * -13 handleが不正
//                     * -24 タイムアウト
//                     * -40 相手がオフラインだった
//                     */
//
//                    if(!only_online)
//                    {
//                        if(resp != -8)
//                        {
//                            members[n_members][0] = members_id[i];
//                            members[n_members][1] = members_id[i];
//                            members[n_members][2] = itoa(resp);
//                            members[n_members][3] = "不明("+itoa(resp)+")";
//                            n_members++;
//                        }
//                    }
//                }
//
//                // ハンドルを破棄
//                L11CloseHandle(handle);
//            }
//            else
//            {
//                if(!only_online)
//                {
//                    members[n_members][0] = members_id[i];
//                    members[n_members][1] = members_id[i];
//                    members[n_members][2] = "-255";
//                    members[n_members][3] = "状態取得失敗";
//                    n_members++;
//                }
//            }
//        }
//    }
//    else
//    {
//        // メンバーリストの取得に失敗
//        return -1;
//    }
//
//    return n_members;
//}
