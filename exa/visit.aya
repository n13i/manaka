/**
 * キャラデリ関連
 *
 * @author  n13i <n13i@m2hq.net>
 *
 * @version 0.1.0
 * @date    2006/07/25 作成
 *
 * @file
 * @ingroup Visit
 */


#import "prototype150.aya"
#import "prototype200.aya"
#import "prototype300.aya"
#import "core/lib/mxcl/mxcl.h"
#import "core/lib/mxcl/pwsconst.h"
#import "core/ui.h"
#import "core/sprict_spr.h"
#import "core/sprict_ict.h"
#import "core/icon.h"
#import "core/debug.h"
#import "core/charadeli.h"
#import "core/msgbox.h"
#import "core/iccomm.h"


string VISIT_PROP = "Visit";

int visit_sid = -1;
int visit_auto_sid = -1;
boolean visit_autoCharaDeliTrigger = false;

/**
 * 訪問準備が完了しているなら訪問処理を行う
 *
 * @static
 */
action visit_go@(Second() % 2 == 1 && CharaDeli_isReady(visit_sid))
{
    Debug(DEBUG_LV_TRACE, "Visit", "exec visit");

    SPR_run("Visit", "go");
    if(CharaDeli_doVisit(visit_sid) != 1)
    {
        // fail
        // サインイン済みでも自分の状態がオフラインだと失敗する？
    }
}

action visit_auto_prepare@(Second() % 2 == 1 && visit_autoCharaDeliTrigger)
{
    visit_autoCharaDeliTrigger = false;
    visit_prepareAutoCharaDeli();
}

action visit_auto_go@(Second() % 2 == 1 && CharaDeli_isReady(visit_auto_sid))
{
    Debug(DEBUG_LV_TRACE, "Visit", "exec visit auto");

    if(CharaDeli_doVisit(visit_auto_sid) != 1)
    {
        // fail
        // サインイン済みでも自分の状態がオフラインだと失敗する？
    }
}

action visit_return@(Second() % 2 == 1 && CharaDeli_isReturned(visit_sid))
{
    Debug(DEBUG_LV_TRACE, "Visit", "return visit");

    SPR_run("Visit", "return");
    CharaDeli_showReplyMessage(visit_sid);
}

action visit_auto_return@(Second() % 2 == 1 && CharaDeli_isReturned(visit_auto_sid))
{
    Debug(DEBUG_LV_TRACE, "Visit", "return visit auto");
}

/**
 * 訪問先からのキャラクタ間通信メッセージのチェック
 */
action visit_checkMessage@(Second() % 2 == 1)
{
    string messages[][];
    int count = ICComm_getMatchingMessages("/.*/", "/.*/", "/^MSCD\\/1\\.0 StartUp/", messages);
    int i;
    for(i = 0; i < count; i++)
    {
        int time = atoi(messages[i][0]);
        string pid = messages[i][1];
        string psn = messages[i][2];
        string msg = messages[i][3];

        ICComm_sendMessage(pid, psn, "MSCD/1.0 StartUpAck " + psn, ICCOMM_SEND_SYNC);
        ICComm_deleteMessage(time);
    }
}

void Visit_init()
{
    MakePropertyTree(VISIT_PROP);

    visit_sid = CharaDeli_newSession();
    CharaDeli_setSendDataName(visit_sid, "etc\\visitor");

    visit_auto_sid = CharaDeli_newSession();
    CharaDeli_setSendDataName(visit_auto_sid, "etc\\visitor_chain");

    if(GetProperty(VISIT_PROP + "\\TimeOut") == NULL)
    {
        PutProperty(VISIT_PROP + "\\TimeOut", "5");
    }
}

void Visit_menu()
{
    boolean loop = true;
    string send_to_id;

    while(loop)
    {
        send_to_id = NULL;
        SPR_run("Visit", "whereToGo");

        AddItem(SPR_getText("Visit_menu", "selectVisitTo"))
        {
            string name;
            string id;

            if(visit_isSignedIn())
            {
                int r;

                MsgBox_pushSize();
                MsgBox_setSize(24, 12);
                //SPR_run("Visit", "checkMemberStates");
                r = visit_selectMember(id, name);
                MsgBox_popSize();

                if(r == 0)
                {
                    send_to_id = id;
                }
                else if(r == -2)
                {
                    SPR_run("Visit", "checkMemberStatesFailed");
                }
            }
        }
        // ID指定訪問
        AddItem(SPR_getText("Visit_menu", "directInputID"))
        {
            if(visit_isSignedIn())
            {
                SPR_run("Visit", "inputVisitTo");
                string id = EditBox(PWS_INPUT_TYPE_NORMAL, 64, "");
                if(id != NULL && id != "")
                {
                    send_to_id = id;
                }
            }
        }
        // TODO 最後に受け取ったキャラデリの返信を表示
        /*
        AddItem(SPR_getText("Visit_menu", "showOfferDir"))
        {
            SPR_run("Visit", "showOfferDir");
        }
        */
        AddItem(SPR_getText("Visit_menu", "autoCharaDeli"))
        {
            if(visit_autoCharaDeliMenu())
            {
                loop = false;
            }
        }
        AddItem(SPR_getText("Visit_menu", "config"))
        {
            Visit_preference();
        }
        AddItem(SPR_getText("Visit_menu", "cancel"))
        {
            SPR_run("Reaction", "canceled");
            loop = false;
        }
        AddCancelItem
        {
            HideMsgBox();
            loop = false;
        }
        Choice;

        // 通常のメッセージあり訪問
        if(send_to_id != NULL && send_to_id != "")
        {
            //string vendor;
            //string type;
            //MXCL_getOwnVendorAndType(vendor, type);

            CharaDeli_setSendTo(visit_sid, send_to_id);
            // --- debug
            //CharaDeli_addSendMessageHeader(visit_sid, "MSCD-FromPSN", vendor + "-" + type);
            // --- debug
            CharaDeli_setSendMessageBody(
                visit_sid,
                "メッセージを入力してください");
            CharaDeli_editMessage(visit_sid);
            SPR_run("Visit", "inputMessage");
            loop = false;
        }
    }
}

void Visit_preference()
{
    string pref[][];
    string result[];

    MsgBox_pushSize();
    MsgBox_setSize(-1, 12);

    UI_prefCreateItem(
        pref, -1, VISIT_PROP + "\\TimeOut", UI_PREF_TYPE_SELECT,
        "タイムアウト",
        SPR_getText("Visit_help", "timeout"),
        "5=5分,10=10分,20=20分", "");

    UI_prefCreateItem(
        pref, -1, VISIT_PROP + "\\EnableAutoCharaDeli", UI_PREF_TYPE_CHECKBOX,
        "暇なとき勝手に出かけていいよ",
        SPR_getText("Visit_help", "enableAutoCharaDeli"),
        "0,1", "");

    UI_prefCreateItem(
        pref, -1, VISIT_PROP + "\\EnableMultiStageCharaDeli", UI_PREF_TYPE_CHECKBOX,
        "多段キャラデリを許可する",
        SPR_getText("Visit_help", "enableMultiStageCharaDeli"),
        "0,1", "");

    if(UI_prefDialog("キャラデリの設定", pref, result) == 1)
    {
        int i;

        for(i = 0; i < lengthof result; i++)
        {
            string id = UI_prefGetID(pref, i);

            if(id != "")
            {
                PutProperty(id, result[i]);
            }
        }
    }

    MsgBox_popSize();
}

/**
 * サインインされていなければメッセージを表示する
 *
 * @retval true  サインインしている
 * @retval false サインインしていない
 *
 * @date 2006/10/30
 * @static
 */
boolean visit_isSignedIn()
{
    if(L11GetOwnSignInState() != 1)
    {
        // サインインしていない
        SPR_run("Visit", "pleaseSignIn");
        return false;
    }

    return true;
}

/**
 * キャラデリの訪問先を選択する
 *
 * @param[out] id   選択されたメンバーの ID
 * @param[out] name 選択されたメンバーの表示名
 *
 * @retval -2 メンバーリストの取得に失敗
 * @retval -1 キャンセルされた
 * @retval  0 正常終了
 *
 * @date 2006/10/29
 * @static
 */
int visit_selectMember(string &id, string &name)
{
    string state[][];
    string ids[];
    int sel;
    int talkwait = GetTalkWaitMode();

    if(MXCL_getMemberStates(state, true, false) > 0)
    {
        int i;

        for(i = 0; i < lengthof state; i++)
        {
            string userid = state[i][0];
            string username = state[i][1];
            int state_type = atoi(state[i][2]);
            string state_str = state[i][3];

            string state_icon;

            switch(state_type)
            {
            case 1:
                // サインインしていない or 不可視
                state_icon = ICON_IM_OFFLINE;
                break;
            case 2:
            case 3:
                // サインインしているが忙しい
                state_icon = ICON_IM_BUSY;
                break;
            case 4:
                // サインインしている
                state_icon = ICON_IM_ONLINE;
                break;
            default:
                state_icon = ICON_IM_OFFLINE;
            }

            ids[i] = state_icon + " " + username + " (" + state_str + ")";
        }

        SetTalkWaitMode(PWS_TALK_NOWAIT);
        SPR_run("Visit", "selectVisitTo");
        Talk(UI_getHorizontalLine() + "\n");
        SetTalkWaitMode(talkwait);

        sel = UI_listBox(ids, 0, -1, true);

        if(sel == -1)
        {
            // キャンセル
            return -1;
        }
        else
        {
            id = state[sel][0];
            name = state[sel][1];
        }
    }
    else
    {
//        ATalk("\e"+RTSGetText("charadeli", "getting_memberlist_failed")+"\c\n");
        return -2;
    }

    return 0;
}

boolean visit_autoCharaDeliMenu()
{
    if(GetProperty(VISIT_PROP + "\\AutoCharaDeli_AckStatement") != "1")
    {
        SPR_run("Visit_help", "autoCharaDeliStatement");
        PutProperty(VISIT_PROP + "\\AutoCharaDeli_AckStatement", "1");
    }

    boolean loop = true;
    boolean break_menu = false;

    while(loop)
    {
        SPR_run("Visit", "autoCharaDeli");

        AddItem(SPR_getText("Selection", "yes"))
        {
            if(visit_isSignedIn())
            {
                SPR_run("Visit", "go");

                loop = false;
                break_menu = true;
                // 勝手に訪問トリガを立てる
                visit_autoCharaDeliTrigger = true;
            }
        }
        AddItem(SPR_getText("Selection", "no"))
        {
            loop = false;
        }
        AddItem(SPR_getText("Visit_menu", "autoCharaDeliHelp"))
        {
            SPR_run("Visit_help", "autoCharaDeliStatement");
        }
        AddCancelItem
        {
            loop = false;
        }
        Choice;
    }

    return break_menu;
}

void visit_prepareAutoCharaDeli()
{
    string state[][];

    if(MXCL_getMemberStates(state, true, true) > 0)
    {
        int idx = Random(lengthof state);
        string pid = state[idx][0];
        string name = state[idx][1];

        Debug(DEBUG_LV_DEBUG, "Visit", "prepareAutoCharaDeli: target pid=" + pid + ", name=" + name);

        string vendor;
        string type;
        MXCL_getOwnVendorAndType(vendor, type);

        CharaDeli_setSendTo(visit_auto_sid, pid);
        CharaDeli_addSendMessageHeader(visit_auto_sid,
                "MSCD-FromPSN", vendor + "-" + type);
        CharaDeli_addSendMessageHeader(visit_auto_sid,
                "MSCD-RootPSN", vendor + "-" + type);
        CharaDeli_addSendMessageHeader(visit_auto_sid,
                "MSCD-Root", L11GetPID());
        CharaDeli_setSendMessageBody(
                visit_auto_sid,
                "これはキャラクタ「愛佳」(NH-MXPJ-01R)の「勝手にキャラデリ」制御用メッセージであり、キャラクタが自動的に送信したものです。");
        CharaDeli_ready(visit_auto_sid);
    }
}

void Visit_triggerAutoVisit()
{
    if(GetProperty(VISIT_PROP + "\\EnableAutoCharaDeli") == "1")
    {
        visit_autoCharaDeliTrigger = true;
    }
}

